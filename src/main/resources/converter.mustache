package {{converterPackage}};

import javax.annotation.processing.Generated;
import java.util.stream.Collectors;
{{#classesData}}
import {{domainFullName}};
import {{protoFullName}};
    {{#oneofBaseFieldsData}}
        {{#oneOfFieldsData}}
import {{oneofImplClass}};
        {{/oneOfFieldsData}}
    {{/oneofBaseFieldsData}}
{{/classesData}}

@Generated(value = "{{generator}}")
public class {{converterClass}} {
    {{#classesData}}
    static public {{protoClass}} toProto({{domainClass}} domain) {
        {{protoClass}}.Builder builder = {{protoClass}}.newBuilder();

        {{#fieldsData}}
        {{{checkNotNullCommand}}}
            {{{addToBuilderCommand}}};
        {{{closeCheckNotNullCommand}}}
        {{/fieldsData}}

        {{#oneofBaseFieldsData}}
        if(domain.get{{oneofBaseField}}() == null) {
        } else
        {{#oneOfFieldsData}}
        if(domain.get{{oneofBaseField}}().getClass() == {{oneofImplClass}}.class) {
            {{{addToBuilderCommand}}};
        } else
        {{/oneOfFieldsData}}
        {}

        {{/oneofBaseFieldsData}}
        return builder.build();
    }

    static public {{domainClass}} toDomain({{protoClass}} proto) {
        {{domainClass}} domain = new {{domainClass}}();

    {{#fieldsData}}
        {{{checkProtoHasValueCommand}}}
        {{{setInDomainCommand}}};
        {{{closeProtoHasValueCommand}}}
    {{/fieldsData}}

    {{#oneofBaseFieldsData}}
        switch (proto.get{{oneofProtoName}}Case()) {
        {{#oneOfFieldsData}}
            case {{oneofFieldCase}}:
                {{oneofImplClassSimple}} {{oneofImplVariable}} = {{oneofImplCreation}};
                {{setValueToVariable}}
                domain.set{{oneofBaseField}}({{oneofImplVariable}});
                break;
        {{/oneOfFieldsData}}
        }

    {{/oneofBaseFieldsData}}

        return domain;
    }

    {{/classesData}}
}